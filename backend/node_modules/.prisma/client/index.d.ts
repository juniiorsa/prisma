
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model TermoReferencia
 * 
 */
export type TermoReferencia = $Result.DefaultSelection<Prisma.$TermoReferenciaPayload>
/**
 * Model ExportacaoTR
 * 
 */
export type ExportacaoTR = $Result.DefaultSelection<Prisma.$ExportacaoTRPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.termoReferencia`: Exposes CRUD operations for the **TermoReferencia** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TermoReferencias
    * const termoReferencias = await prisma.termoReferencia.findMany()
    * ```
    */
  get termoReferencia(): Prisma.TermoReferenciaDelegate<ExtArgs>;

  /**
   * `prisma.exportacaoTR`: Exposes CRUD operations for the **ExportacaoTR** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ExportacaoTRS
    * const exportacaoTRS = await prisma.exportacaoTR.findMany()
    * ```
    */
  get exportacaoTR(): Prisma.ExportacaoTRDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    TermoReferencia: 'TermoReferencia',
    ExportacaoTR: 'ExportacaoTR'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "termoReferencia" | "exportacaoTR"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      TermoReferencia: {
        payload: Prisma.$TermoReferenciaPayload<ExtArgs>
        fields: Prisma.TermoReferenciaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TermoReferenciaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermoReferenciaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TermoReferenciaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermoReferenciaPayload>
          }
          findFirst: {
            args: Prisma.TermoReferenciaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermoReferenciaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TermoReferenciaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermoReferenciaPayload>
          }
          findMany: {
            args: Prisma.TermoReferenciaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermoReferenciaPayload>[]
          }
          create: {
            args: Prisma.TermoReferenciaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermoReferenciaPayload>
          }
          createMany: {
            args: Prisma.TermoReferenciaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TermoReferenciaCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermoReferenciaPayload>[]
          }
          delete: {
            args: Prisma.TermoReferenciaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermoReferenciaPayload>
          }
          update: {
            args: Prisma.TermoReferenciaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermoReferenciaPayload>
          }
          deleteMany: {
            args: Prisma.TermoReferenciaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TermoReferenciaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.TermoReferenciaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TermoReferenciaPayload>
          }
          aggregate: {
            args: Prisma.TermoReferenciaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTermoReferencia>
          }
          groupBy: {
            args: Prisma.TermoReferenciaGroupByArgs<ExtArgs>
            result: $Utils.Optional<TermoReferenciaGroupByOutputType>[]
          }
          count: {
            args: Prisma.TermoReferenciaCountArgs<ExtArgs>
            result: $Utils.Optional<TermoReferenciaCountAggregateOutputType> | number
          }
        }
      }
      ExportacaoTR: {
        payload: Prisma.$ExportacaoTRPayload<ExtArgs>
        fields: Prisma.ExportacaoTRFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExportacaoTRFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExportacaoTRPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExportacaoTRFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExportacaoTRPayload>
          }
          findFirst: {
            args: Prisma.ExportacaoTRFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExportacaoTRPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExportacaoTRFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExportacaoTRPayload>
          }
          findMany: {
            args: Prisma.ExportacaoTRFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExportacaoTRPayload>[]
          }
          create: {
            args: Prisma.ExportacaoTRCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExportacaoTRPayload>
          }
          createMany: {
            args: Prisma.ExportacaoTRCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExportacaoTRCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExportacaoTRPayload>[]
          }
          delete: {
            args: Prisma.ExportacaoTRDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExportacaoTRPayload>
          }
          update: {
            args: Prisma.ExportacaoTRUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExportacaoTRPayload>
          }
          deleteMany: {
            args: Prisma.ExportacaoTRDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ExportacaoTRUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ExportacaoTRUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ExportacaoTRPayload>
          }
          aggregate: {
            args: Prisma.ExportacaoTRAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateExportacaoTR>
          }
          groupBy: {
            args: Prisma.ExportacaoTRGroupByArgs<ExtArgs>
            result: $Utils.Optional<ExportacaoTRGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExportacaoTRCountArgs<ExtArgs>
            result: $Utils.Optional<ExportacaoTRCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    documentos: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documentos?: boolean | UserCountOutputTypeCountDocumentosArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountDocumentosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TermoReferenciaWhereInput
  }


  /**
   * Count Type TermoReferenciaCountOutputType
   */

  export type TermoReferenciaCountOutputType = {
    exportacoes: number
  }

  export type TermoReferenciaCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    exportacoes?: boolean | TermoReferenciaCountOutputTypeCountExportacoesArgs
  }

  // Custom InputTypes
  /**
   * TermoReferenciaCountOutputType without action
   */
  export type TermoReferenciaCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermoReferenciaCountOutputType
     */
    select?: TermoReferenciaCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TermoReferenciaCountOutputType without action
   */
  export type TermoReferenciaCountOutputTypeCountExportacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExportacaoTRWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    nome: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    nome: string | null
    password: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    nome: number
    password: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    nome?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    nome?: true
    password?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    nome?: true
    password?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    nome: string | null
    password: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    nome?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    documentos?: boolean | User$documentosArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    nome?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    nome?: boolean
    password?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    documentos?: boolean | User$documentosArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      documentos: Prisma.$TermoReferenciaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      nome: string | null
      password: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    documentos<T extends User$documentosArgs<ExtArgs> = {}>(args?: Subset<T, User$documentosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TermoReferenciaPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly nome: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.documentos
   */
  export type User$documentosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermoReferencia
     */
    select?: TermoReferenciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermoReferenciaInclude<ExtArgs> | null
    where?: TermoReferenciaWhereInput
    orderBy?: TermoReferenciaOrderByWithRelationInput | TermoReferenciaOrderByWithRelationInput[]
    cursor?: TermoReferenciaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TermoReferenciaScalarFieldEnum | TermoReferenciaScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model TermoReferencia
   */

  export type AggregateTermoReferencia = {
    _count: TermoReferenciaCountAggregateOutputType | null
    _min: TermoReferenciaMinAggregateOutputType | null
    _max: TermoReferenciaMaxAggregateOutputType | null
  }

  export type TermoReferenciaMinAggregateOutputType = {
    id: string | null
    titulo: string | null
    status: string | null
    autorId: string | null
    criado_em: Date | null
    atualizado_em: Date | null
  }

  export type TermoReferenciaMaxAggregateOutputType = {
    id: string | null
    titulo: string | null
    status: string | null
    autorId: string | null
    criado_em: Date | null
    atualizado_em: Date | null
  }

  export type TermoReferenciaCountAggregateOutputType = {
    id: number
    titulo: number
    status: number
    autorId: number
    dadosColeta: number
    dadosPrecos: number
    dadosJustificativa: number
    dadosFiscalizacao: number
    criado_em: number
    atualizado_em: number
    _all: number
  }


  export type TermoReferenciaMinAggregateInputType = {
    id?: true
    titulo?: true
    status?: true
    autorId?: true
    criado_em?: true
    atualizado_em?: true
  }

  export type TermoReferenciaMaxAggregateInputType = {
    id?: true
    titulo?: true
    status?: true
    autorId?: true
    criado_em?: true
    atualizado_em?: true
  }

  export type TermoReferenciaCountAggregateInputType = {
    id?: true
    titulo?: true
    status?: true
    autorId?: true
    dadosColeta?: true
    dadosPrecos?: true
    dadosJustificativa?: true
    dadosFiscalizacao?: true
    criado_em?: true
    atualizado_em?: true
    _all?: true
  }

  export type TermoReferenciaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TermoReferencia to aggregate.
     */
    where?: TermoReferenciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TermoReferencias to fetch.
     */
    orderBy?: TermoReferenciaOrderByWithRelationInput | TermoReferenciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TermoReferenciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TermoReferencias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TermoReferencias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TermoReferencias
    **/
    _count?: true | TermoReferenciaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TermoReferenciaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TermoReferenciaMaxAggregateInputType
  }

  export type GetTermoReferenciaAggregateType<T extends TermoReferenciaAggregateArgs> = {
        [P in keyof T & keyof AggregateTermoReferencia]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTermoReferencia[P]>
      : GetScalarType<T[P], AggregateTermoReferencia[P]>
  }




  export type TermoReferenciaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TermoReferenciaWhereInput
    orderBy?: TermoReferenciaOrderByWithAggregationInput | TermoReferenciaOrderByWithAggregationInput[]
    by: TermoReferenciaScalarFieldEnum[] | TermoReferenciaScalarFieldEnum
    having?: TermoReferenciaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TermoReferenciaCountAggregateInputType | true
    _min?: TermoReferenciaMinAggregateInputType
    _max?: TermoReferenciaMaxAggregateInputType
  }

  export type TermoReferenciaGroupByOutputType = {
    id: string
    titulo: string
    status: string
    autorId: string
    dadosColeta: JsonValue | null
    dadosPrecos: JsonValue | null
    dadosJustificativa: JsonValue | null
    dadosFiscalizacao: JsonValue | null
    criado_em: Date
    atualizado_em: Date
    _count: TermoReferenciaCountAggregateOutputType | null
    _min: TermoReferenciaMinAggregateOutputType | null
    _max: TermoReferenciaMaxAggregateOutputType | null
  }

  type GetTermoReferenciaGroupByPayload<T extends TermoReferenciaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TermoReferenciaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TermoReferenciaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TermoReferenciaGroupByOutputType[P]>
            : GetScalarType<T[P], TermoReferenciaGroupByOutputType[P]>
        }
      >
    >


  export type TermoReferenciaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    status?: boolean
    autorId?: boolean
    dadosColeta?: boolean
    dadosPrecos?: boolean
    dadosJustificativa?: boolean
    dadosFiscalizacao?: boolean
    criado_em?: boolean
    atualizado_em?: boolean
    autor?: boolean | UserDefaultArgs<ExtArgs>
    exportacoes?: boolean | TermoReferencia$exportacoesArgs<ExtArgs>
    _count?: boolean | TermoReferenciaCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["termoReferencia"]>

  export type TermoReferenciaSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    titulo?: boolean
    status?: boolean
    autorId?: boolean
    dadosColeta?: boolean
    dadosPrecos?: boolean
    dadosJustificativa?: boolean
    dadosFiscalizacao?: boolean
    criado_em?: boolean
    atualizado_em?: boolean
    autor?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["termoReferencia"]>

  export type TermoReferenciaSelectScalar = {
    id?: boolean
    titulo?: boolean
    status?: boolean
    autorId?: boolean
    dadosColeta?: boolean
    dadosPrecos?: boolean
    dadosJustificativa?: boolean
    dadosFiscalizacao?: boolean
    criado_em?: boolean
    atualizado_em?: boolean
  }

  export type TermoReferenciaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    autor?: boolean | UserDefaultArgs<ExtArgs>
    exportacoes?: boolean | TermoReferencia$exportacoesArgs<ExtArgs>
    _count?: boolean | TermoReferenciaCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TermoReferenciaIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    autor?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TermoReferenciaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TermoReferencia"
    objects: {
      autor: Prisma.$UserPayload<ExtArgs>
      exportacoes: Prisma.$ExportacaoTRPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      titulo: string
      status: string
      autorId: string
      dadosColeta: Prisma.JsonValue | null
      dadosPrecos: Prisma.JsonValue | null
      dadosJustificativa: Prisma.JsonValue | null
      dadosFiscalizacao: Prisma.JsonValue | null
      criado_em: Date
      atualizado_em: Date
    }, ExtArgs["result"]["termoReferencia"]>
    composites: {}
  }

  type TermoReferenciaGetPayload<S extends boolean | null | undefined | TermoReferenciaDefaultArgs> = $Result.GetResult<Prisma.$TermoReferenciaPayload, S>

  type TermoReferenciaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TermoReferenciaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TermoReferenciaCountAggregateInputType | true
    }

  export interface TermoReferenciaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TermoReferencia'], meta: { name: 'TermoReferencia' } }
    /**
     * Find zero or one TermoReferencia that matches the filter.
     * @param {TermoReferenciaFindUniqueArgs} args - Arguments to find a TermoReferencia
     * @example
     * // Get one TermoReferencia
     * const termoReferencia = await prisma.termoReferencia.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TermoReferenciaFindUniqueArgs>(args: SelectSubset<T, TermoReferenciaFindUniqueArgs<ExtArgs>>): Prisma__TermoReferenciaClient<$Result.GetResult<Prisma.$TermoReferenciaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one TermoReferencia that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {TermoReferenciaFindUniqueOrThrowArgs} args - Arguments to find a TermoReferencia
     * @example
     * // Get one TermoReferencia
     * const termoReferencia = await prisma.termoReferencia.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TermoReferenciaFindUniqueOrThrowArgs>(args: SelectSubset<T, TermoReferenciaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TermoReferenciaClient<$Result.GetResult<Prisma.$TermoReferenciaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first TermoReferencia that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermoReferenciaFindFirstArgs} args - Arguments to find a TermoReferencia
     * @example
     * // Get one TermoReferencia
     * const termoReferencia = await prisma.termoReferencia.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TermoReferenciaFindFirstArgs>(args?: SelectSubset<T, TermoReferenciaFindFirstArgs<ExtArgs>>): Prisma__TermoReferenciaClient<$Result.GetResult<Prisma.$TermoReferenciaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first TermoReferencia that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermoReferenciaFindFirstOrThrowArgs} args - Arguments to find a TermoReferencia
     * @example
     * // Get one TermoReferencia
     * const termoReferencia = await prisma.termoReferencia.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TermoReferenciaFindFirstOrThrowArgs>(args?: SelectSubset<T, TermoReferenciaFindFirstOrThrowArgs<ExtArgs>>): Prisma__TermoReferenciaClient<$Result.GetResult<Prisma.$TermoReferenciaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more TermoReferencias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermoReferenciaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TermoReferencias
     * const termoReferencias = await prisma.termoReferencia.findMany()
     * 
     * // Get first 10 TermoReferencias
     * const termoReferencias = await prisma.termoReferencia.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const termoReferenciaWithIdOnly = await prisma.termoReferencia.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TermoReferenciaFindManyArgs>(args?: SelectSubset<T, TermoReferenciaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TermoReferenciaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a TermoReferencia.
     * @param {TermoReferenciaCreateArgs} args - Arguments to create a TermoReferencia.
     * @example
     * // Create one TermoReferencia
     * const TermoReferencia = await prisma.termoReferencia.create({
     *   data: {
     *     // ... data to create a TermoReferencia
     *   }
     * })
     * 
     */
    create<T extends TermoReferenciaCreateArgs>(args: SelectSubset<T, TermoReferenciaCreateArgs<ExtArgs>>): Prisma__TermoReferenciaClient<$Result.GetResult<Prisma.$TermoReferenciaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many TermoReferencias.
     * @param {TermoReferenciaCreateManyArgs} args - Arguments to create many TermoReferencias.
     * @example
     * // Create many TermoReferencias
     * const termoReferencia = await prisma.termoReferencia.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TermoReferenciaCreateManyArgs>(args?: SelectSubset<T, TermoReferenciaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TermoReferencias and returns the data saved in the database.
     * @param {TermoReferenciaCreateManyAndReturnArgs} args - Arguments to create many TermoReferencias.
     * @example
     * // Create many TermoReferencias
     * const termoReferencia = await prisma.termoReferencia.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TermoReferencias and only return the `id`
     * const termoReferenciaWithIdOnly = await prisma.termoReferencia.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TermoReferenciaCreateManyAndReturnArgs>(args?: SelectSubset<T, TermoReferenciaCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TermoReferenciaPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a TermoReferencia.
     * @param {TermoReferenciaDeleteArgs} args - Arguments to delete one TermoReferencia.
     * @example
     * // Delete one TermoReferencia
     * const TermoReferencia = await prisma.termoReferencia.delete({
     *   where: {
     *     // ... filter to delete one TermoReferencia
     *   }
     * })
     * 
     */
    delete<T extends TermoReferenciaDeleteArgs>(args: SelectSubset<T, TermoReferenciaDeleteArgs<ExtArgs>>): Prisma__TermoReferenciaClient<$Result.GetResult<Prisma.$TermoReferenciaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one TermoReferencia.
     * @param {TermoReferenciaUpdateArgs} args - Arguments to update one TermoReferencia.
     * @example
     * // Update one TermoReferencia
     * const termoReferencia = await prisma.termoReferencia.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TermoReferenciaUpdateArgs>(args: SelectSubset<T, TermoReferenciaUpdateArgs<ExtArgs>>): Prisma__TermoReferenciaClient<$Result.GetResult<Prisma.$TermoReferenciaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more TermoReferencias.
     * @param {TermoReferenciaDeleteManyArgs} args - Arguments to filter TermoReferencias to delete.
     * @example
     * // Delete a few TermoReferencias
     * const { count } = await prisma.termoReferencia.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TermoReferenciaDeleteManyArgs>(args?: SelectSubset<T, TermoReferenciaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TermoReferencias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermoReferenciaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TermoReferencias
     * const termoReferencia = await prisma.termoReferencia.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TermoReferenciaUpdateManyArgs>(args: SelectSubset<T, TermoReferenciaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one TermoReferencia.
     * @param {TermoReferenciaUpsertArgs} args - Arguments to update or create a TermoReferencia.
     * @example
     * // Update or create a TermoReferencia
     * const termoReferencia = await prisma.termoReferencia.upsert({
     *   create: {
     *     // ... data to create a TermoReferencia
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TermoReferencia we want to update
     *   }
     * })
     */
    upsert<T extends TermoReferenciaUpsertArgs>(args: SelectSubset<T, TermoReferenciaUpsertArgs<ExtArgs>>): Prisma__TermoReferenciaClient<$Result.GetResult<Prisma.$TermoReferenciaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of TermoReferencias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermoReferenciaCountArgs} args - Arguments to filter TermoReferencias to count.
     * @example
     * // Count the number of TermoReferencias
     * const count = await prisma.termoReferencia.count({
     *   where: {
     *     // ... the filter for the TermoReferencias we want to count
     *   }
     * })
    **/
    count<T extends TermoReferenciaCountArgs>(
      args?: Subset<T, TermoReferenciaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TermoReferenciaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TermoReferencia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermoReferenciaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TermoReferenciaAggregateArgs>(args: Subset<T, TermoReferenciaAggregateArgs>): Prisma.PrismaPromise<GetTermoReferenciaAggregateType<T>>

    /**
     * Group by TermoReferencia.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TermoReferenciaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TermoReferenciaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TermoReferenciaGroupByArgs['orderBy'] }
        : { orderBy?: TermoReferenciaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TermoReferenciaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTermoReferenciaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TermoReferencia model
   */
  readonly fields: TermoReferenciaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TermoReferencia.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TermoReferenciaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    autor<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    exportacoes<T extends TermoReferencia$exportacoesArgs<ExtArgs> = {}>(args?: Subset<T, TermoReferencia$exportacoesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExportacaoTRPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TermoReferencia model
   */ 
  interface TermoReferenciaFieldRefs {
    readonly id: FieldRef<"TermoReferencia", 'String'>
    readonly titulo: FieldRef<"TermoReferencia", 'String'>
    readonly status: FieldRef<"TermoReferencia", 'String'>
    readonly autorId: FieldRef<"TermoReferencia", 'String'>
    readonly dadosColeta: FieldRef<"TermoReferencia", 'Json'>
    readonly dadosPrecos: FieldRef<"TermoReferencia", 'Json'>
    readonly dadosJustificativa: FieldRef<"TermoReferencia", 'Json'>
    readonly dadosFiscalizacao: FieldRef<"TermoReferencia", 'Json'>
    readonly criado_em: FieldRef<"TermoReferencia", 'DateTime'>
    readonly atualizado_em: FieldRef<"TermoReferencia", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TermoReferencia findUnique
   */
  export type TermoReferenciaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermoReferencia
     */
    select?: TermoReferenciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermoReferenciaInclude<ExtArgs> | null
    /**
     * Filter, which TermoReferencia to fetch.
     */
    where: TermoReferenciaWhereUniqueInput
  }

  /**
   * TermoReferencia findUniqueOrThrow
   */
  export type TermoReferenciaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermoReferencia
     */
    select?: TermoReferenciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermoReferenciaInclude<ExtArgs> | null
    /**
     * Filter, which TermoReferencia to fetch.
     */
    where: TermoReferenciaWhereUniqueInput
  }

  /**
   * TermoReferencia findFirst
   */
  export type TermoReferenciaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermoReferencia
     */
    select?: TermoReferenciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermoReferenciaInclude<ExtArgs> | null
    /**
     * Filter, which TermoReferencia to fetch.
     */
    where?: TermoReferenciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TermoReferencias to fetch.
     */
    orderBy?: TermoReferenciaOrderByWithRelationInput | TermoReferenciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TermoReferencias.
     */
    cursor?: TermoReferenciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TermoReferencias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TermoReferencias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TermoReferencias.
     */
    distinct?: TermoReferenciaScalarFieldEnum | TermoReferenciaScalarFieldEnum[]
  }

  /**
   * TermoReferencia findFirstOrThrow
   */
  export type TermoReferenciaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermoReferencia
     */
    select?: TermoReferenciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermoReferenciaInclude<ExtArgs> | null
    /**
     * Filter, which TermoReferencia to fetch.
     */
    where?: TermoReferenciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TermoReferencias to fetch.
     */
    orderBy?: TermoReferenciaOrderByWithRelationInput | TermoReferenciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TermoReferencias.
     */
    cursor?: TermoReferenciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TermoReferencias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TermoReferencias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TermoReferencias.
     */
    distinct?: TermoReferenciaScalarFieldEnum | TermoReferenciaScalarFieldEnum[]
  }

  /**
   * TermoReferencia findMany
   */
  export type TermoReferenciaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermoReferencia
     */
    select?: TermoReferenciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermoReferenciaInclude<ExtArgs> | null
    /**
     * Filter, which TermoReferencias to fetch.
     */
    where?: TermoReferenciaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TermoReferencias to fetch.
     */
    orderBy?: TermoReferenciaOrderByWithRelationInput | TermoReferenciaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TermoReferencias.
     */
    cursor?: TermoReferenciaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TermoReferencias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TermoReferencias.
     */
    skip?: number
    distinct?: TermoReferenciaScalarFieldEnum | TermoReferenciaScalarFieldEnum[]
  }

  /**
   * TermoReferencia create
   */
  export type TermoReferenciaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermoReferencia
     */
    select?: TermoReferenciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermoReferenciaInclude<ExtArgs> | null
    /**
     * The data needed to create a TermoReferencia.
     */
    data: XOR<TermoReferenciaCreateInput, TermoReferenciaUncheckedCreateInput>
  }

  /**
   * TermoReferencia createMany
   */
  export type TermoReferenciaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TermoReferencias.
     */
    data: TermoReferenciaCreateManyInput | TermoReferenciaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TermoReferencia createManyAndReturn
   */
  export type TermoReferenciaCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermoReferencia
     */
    select?: TermoReferenciaSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many TermoReferencias.
     */
    data: TermoReferenciaCreateManyInput | TermoReferenciaCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermoReferenciaIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TermoReferencia update
   */
  export type TermoReferenciaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermoReferencia
     */
    select?: TermoReferenciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermoReferenciaInclude<ExtArgs> | null
    /**
     * The data needed to update a TermoReferencia.
     */
    data: XOR<TermoReferenciaUpdateInput, TermoReferenciaUncheckedUpdateInput>
    /**
     * Choose, which TermoReferencia to update.
     */
    where: TermoReferenciaWhereUniqueInput
  }

  /**
   * TermoReferencia updateMany
   */
  export type TermoReferenciaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TermoReferencias.
     */
    data: XOR<TermoReferenciaUpdateManyMutationInput, TermoReferenciaUncheckedUpdateManyInput>
    /**
     * Filter which TermoReferencias to update
     */
    where?: TermoReferenciaWhereInput
  }

  /**
   * TermoReferencia upsert
   */
  export type TermoReferenciaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermoReferencia
     */
    select?: TermoReferenciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermoReferenciaInclude<ExtArgs> | null
    /**
     * The filter to search for the TermoReferencia to update in case it exists.
     */
    where: TermoReferenciaWhereUniqueInput
    /**
     * In case the TermoReferencia found by the `where` argument doesn't exist, create a new TermoReferencia with this data.
     */
    create: XOR<TermoReferenciaCreateInput, TermoReferenciaUncheckedCreateInput>
    /**
     * In case the TermoReferencia was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TermoReferenciaUpdateInput, TermoReferenciaUncheckedUpdateInput>
  }

  /**
   * TermoReferencia delete
   */
  export type TermoReferenciaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermoReferencia
     */
    select?: TermoReferenciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermoReferenciaInclude<ExtArgs> | null
    /**
     * Filter which TermoReferencia to delete.
     */
    where: TermoReferenciaWhereUniqueInput
  }

  /**
   * TermoReferencia deleteMany
   */
  export type TermoReferenciaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TermoReferencias to delete
     */
    where?: TermoReferenciaWhereInput
  }

  /**
   * TermoReferencia.exportacoes
   */
  export type TermoReferencia$exportacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExportacaoTR
     */
    select?: ExportacaoTRSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExportacaoTRInclude<ExtArgs> | null
    where?: ExportacaoTRWhereInput
    orderBy?: ExportacaoTROrderByWithRelationInput | ExportacaoTROrderByWithRelationInput[]
    cursor?: ExportacaoTRWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExportacaoTRScalarFieldEnum | ExportacaoTRScalarFieldEnum[]
  }

  /**
   * TermoReferencia without action
   */
  export type TermoReferenciaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TermoReferencia
     */
    select?: TermoReferenciaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TermoReferenciaInclude<ExtArgs> | null
  }


  /**
   * Model ExportacaoTR
   */

  export type AggregateExportacaoTR = {
    _count: ExportacaoTRCountAggregateOutputType | null
    _min: ExportacaoTRMinAggregateOutputType | null
    _max: ExportacaoTRMaxAggregateOutputType | null
  }

  export type ExportacaoTRMinAggregateOutputType = {
    id: string | null
    tr_id: string | null
    tipo: string | null
    url_arquivo: string | null
    hash_sha256: string | null
    gerado_em: Date | null
  }

  export type ExportacaoTRMaxAggregateOutputType = {
    id: string | null
    tr_id: string | null
    tipo: string | null
    url_arquivo: string | null
    hash_sha256: string | null
    gerado_em: Date | null
  }

  export type ExportacaoTRCountAggregateOutputType = {
    id: number
    tr_id: number
    tipo: number
    url_arquivo: number
    hash_sha256: number
    gerado_em: number
    _all: number
  }


  export type ExportacaoTRMinAggregateInputType = {
    id?: true
    tr_id?: true
    tipo?: true
    url_arquivo?: true
    hash_sha256?: true
    gerado_em?: true
  }

  export type ExportacaoTRMaxAggregateInputType = {
    id?: true
    tr_id?: true
    tipo?: true
    url_arquivo?: true
    hash_sha256?: true
    gerado_em?: true
  }

  export type ExportacaoTRCountAggregateInputType = {
    id?: true
    tr_id?: true
    tipo?: true
    url_arquivo?: true
    hash_sha256?: true
    gerado_em?: true
    _all?: true
  }

  export type ExportacaoTRAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExportacaoTR to aggregate.
     */
    where?: ExportacaoTRWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExportacaoTRS to fetch.
     */
    orderBy?: ExportacaoTROrderByWithRelationInput | ExportacaoTROrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExportacaoTRWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExportacaoTRS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExportacaoTRS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ExportacaoTRS
    **/
    _count?: true | ExportacaoTRCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExportacaoTRMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExportacaoTRMaxAggregateInputType
  }

  export type GetExportacaoTRAggregateType<T extends ExportacaoTRAggregateArgs> = {
        [P in keyof T & keyof AggregateExportacaoTR]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExportacaoTR[P]>
      : GetScalarType<T[P], AggregateExportacaoTR[P]>
  }




  export type ExportacaoTRGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExportacaoTRWhereInput
    orderBy?: ExportacaoTROrderByWithAggregationInput | ExportacaoTROrderByWithAggregationInput[]
    by: ExportacaoTRScalarFieldEnum[] | ExportacaoTRScalarFieldEnum
    having?: ExportacaoTRScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExportacaoTRCountAggregateInputType | true
    _min?: ExportacaoTRMinAggregateInputType
    _max?: ExportacaoTRMaxAggregateInputType
  }

  export type ExportacaoTRGroupByOutputType = {
    id: string
    tr_id: string
    tipo: string
    url_arquivo: string
    hash_sha256: string
    gerado_em: Date
    _count: ExportacaoTRCountAggregateOutputType | null
    _min: ExportacaoTRMinAggregateOutputType | null
    _max: ExportacaoTRMaxAggregateOutputType | null
  }

  type GetExportacaoTRGroupByPayload<T extends ExportacaoTRGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExportacaoTRGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExportacaoTRGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExportacaoTRGroupByOutputType[P]>
            : GetScalarType<T[P], ExportacaoTRGroupByOutputType[P]>
        }
      >
    >


  export type ExportacaoTRSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tr_id?: boolean
    tipo?: boolean
    url_arquivo?: boolean
    hash_sha256?: boolean
    gerado_em?: boolean
    tr?: boolean | TermoReferenciaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exportacaoTR"]>

  export type ExportacaoTRSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    tr_id?: boolean
    tipo?: boolean
    url_arquivo?: boolean
    hash_sha256?: boolean
    gerado_em?: boolean
    tr?: boolean | TermoReferenciaDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["exportacaoTR"]>

  export type ExportacaoTRSelectScalar = {
    id?: boolean
    tr_id?: boolean
    tipo?: boolean
    url_arquivo?: boolean
    hash_sha256?: boolean
    gerado_em?: boolean
  }

  export type ExportacaoTRInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tr?: boolean | TermoReferenciaDefaultArgs<ExtArgs>
  }
  export type ExportacaoTRIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tr?: boolean | TermoReferenciaDefaultArgs<ExtArgs>
  }

  export type $ExportacaoTRPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ExportacaoTR"
    objects: {
      tr: Prisma.$TermoReferenciaPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      tr_id: string
      tipo: string
      url_arquivo: string
      hash_sha256: string
      gerado_em: Date
    }, ExtArgs["result"]["exportacaoTR"]>
    composites: {}
  }

  type ExportacaoTRGetPayload<S extends boolean | null | undefined | ExportacaoTRDefaultArgs> = $Result.GetResult<Prisma.$ExportacaoTRPayload, S>

  type ExportacaoTRCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ExportacaoTRFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ExportacaoTRCountAggregateInputType | true
    }

  export interface ExportacaoTRDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ExportacaoTR'], meta: { name: 'ExportacaoTR' } }
    /**
     * Find zero or one ExportacaoTR that matches the filter.
     * @param {ExportacaoTRFindUniqueArgs} args - Arguments to find a ExportacaoTR
     * @example
     * // Get one ExportacaoTR
     * const exportacaoTR = await prisma.exportacaoTR.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ExportacaoTRFindUniqueArgs>(args: SelectSubset<T, ExportacaoTRFindUniqueArgs<ExtArgs>>): Prisma__ExportacaoTRClient<$Result.GetResult<Prisma.$ExportacaoTRPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ExportacaoTR that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ExportacaoTRFindUniqueOrThrowArgs} args - Arguments to find a ExportacaoTR
     * @example
     * // Get one ExportacaoTR
     * const exportacaoTR = await prisma.exportacaoTR.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ExportacaoTRFindUniqueOrThrowArgs>(args: SelectSubset<T, ExportacaoTRFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ExportacaoTRClient<$Result.GetResult<Prisma.$ExportacaoTRPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ExportacaoTR that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExportacaoTRFindFirstArgs} args - Arguments to find a ExportacaoTR
     * @example
     * // Get one ExportacaoTR
     * const exportacaoTR = await prisma.exportacaoTR.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ExportacaoTRFindFirstArgs>(args?: SelectSubset<T, ExportacaoTRFindFirstArgs<ExtArgs>>): Prisma__ExportacaoTRClient<$Result.GetResult<Prisma.$ExportacaoTRPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ExportacaoTR that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExportacaoTRFindFirstOrThrowArgs} args - Arguments to find a ExportacaoTR
     * @example
     * // Get one ExportacaoTR
     * const exportacaoTR = await prisma.exportacaoTR.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ExportacaoTRFindFirstOrThrowArgs>(args?: SelectSubset<T, ExportacaoTRFindFirstOrThrowArgs<ExtArgs>>): Prisma__ExportacaoTRClient<$Result.GetResult<Prisma.$ExportacaoTRPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ExportacaoTRS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExportacaoTRFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ExportacaoTRS
     * const exportacaoTRS = await prisma.exportacaoTR.findMany()
     * 
     * // Get first 10 ExportacaoTRS
     * const exportacaoTRS = await prisma.exportacaoTR.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exportacaoTRWithIdOnly = await prisma.exportacaoTR.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ExportacaoTRFindManyArgs>(args?: SelectSubset<T, ExportacaoTRFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExportacaoTRPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ExportacaoTR.
     * @param {ExportacaoTRCreateArgs} args - Arguments to create a ExportacaoTR.
     * @example
     * // Create one ExportacaoTR
     * const ExportacaoTR = await prisma.exportacaoTR.create({
     *   data: {
     *     // ... data to create a ExportacaoTR
     *   }
     * })
     * 
     */
    create<T extends ExportacaoTRCreateArgs>(args: SelectSubset<T, ExportacaoTRCreateArgs<ExtArgs>>): Prisma__ExportacaoTRClient<$Result.GetResult<Prisma.$ExportacaoTRPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ExportacaoTRS.
     * @param {ExportacaoTRCreateManyArgs} args - Arguments to create many ExportacaoTRS.
     * @example
     * // Create many ExportacaoTRS
     * const exportacaoTR = await prisma.exportacaoTR.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ExportacaoTRCreateManyArgs>(args?: SelectSubset<T, ExportacaoTRCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ExportacaoTRS and returns the data saved in the database.
     * @param {ExportacaoTRCreateManyAndReturnArgs} args - Arguments to create many ExportacaoTRS.
     * @example
     * // Create many ExportacaoTRS
     * const exportacaoTR = await prisma.exportacaoTR.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ExportacaoTRS and only return the `id`
     * const exportacaoTRWithIdOnly = await prisma.exportacaoTR.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ExportacaoTRCreateManyAndReturnArgs>(args?: SelectSubset<T, ExportacaoTRCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExportacaoTRPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ExportacaoTR.
     * @param {ExportacaoTRDeleteArgs} args - Arguments to delete one ExportacaoTR.
     * @example
     * // Delete one ExportacaoTR
     * const ExportacaoTR = await prisma.exportacaoTR.delete({
     *   where: {
     *     // ... filter to delete one ExportacaoTR
     *   }
     * })
     * 
     */
    delete<T extends ExportacaoTRDeleteArgs>(args: SelectSubset<T, ExportacaoTRDeleteArgs<ExtArgs>>): Prisma__ExportacaoTRClient<$Result.GetResult<Prisma.$ExportacaoTRPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ExportacaoTR.
     * @param {ExportacaoTRUpdateArgs} args - Arguments to update one ExportacaoTR.
     * @example
     * // Update one ExportacaoTR
     * const exportacaoTR = await prisma.exportacaoTR.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ExportacaoTRUpdateArgs>(args: SelectSubset<T, ExportacaoTRUpdateArgs<ExtArgs>>): Prisma__ExportacaoTRClient<$Result.GetResult<Prisma.$ExportacaoTRPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ExportacaoTRS.
     * @param {ExportacaoTRDeleteManyArgs} args - Arguments to filter ExportacaoTRS to delete.
     * @example
     * // Delete a few ExportacaoTRS
     * const { count } = await prisma.exportacaoTR.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ExportacaoTRDeleteManyArgs>(args?: SelectSubset<T, ExportacaoTRDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ExportacaoTRS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExportacaoTRUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ExportacaoTRS
     * const exportacaoTR = await prisma.exportacaoTR.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ExportacaoTRUpdateManyArgs>(args: SelectSubset<T, ExportacaoTRUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ExportacaoTR.
     * @param {ExportacaoTRUpsertArgs} args - Arguments to update or create a ExportacaoTR.
     * @example
     * // Update or create a ExportacaoTR
     * const exportacaoTR = await prisma.exportacaoTR.upsert({
     *   create: {
     *     // ... data to create a ExportacaoTR
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ExportacaoTR we want to update
     *   }
     * })
     */
    upsert<T extends ExportacaoTRUpsertArgs>(args: SelectSubset<T, ExportacaoTRUpsertArgs<ExtArgs>>): Prisma__ExportacaoTRClient<$Result.GetResult<Prisma.$ExportacaoTRPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ExportacaoTRS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExportacaoTRCountArgs} args - Arguments to filter ExportacaoTRS to count.
     * @example
     * // Count the number of ExportacaoTRS
     * const count = await prisma.exportacaoTR.count({
     *   where: {
     *     // ... the filter for the ExportacaoTRS we want to count
     *   }
     * })
    **/
    count<T extends ExportacaoTRCountArgs>(
      args?: Subset<T, ExportacaoTRCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExportacaoTRCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ExportacaoTR.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExportacaoTRAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExportacaoTRAggregateArgs>(args: Subset<T, ExportacaoTRAggregateArgs>): Prisma.PrismaPromise<GetExportacaoTRAggregateType<T>>

    /**
     * Group by ExportacaoTR.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExportacaoTRGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExportacaoTRGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExportacaoTRGroupByArgs['orderBy'] }
        : { orderBy?: ExportacaoTRGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExportacaoTRGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExportacaoTRGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ExportacaoTR model
   */
  readonly fields: ExportacaoTRFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ExportacaoTR.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExportacaoTRClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tr<T extends TermoReferenciaDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TermoReferenciaDefaultArgs<ExtArgs>>): Prisma__TermoReferenciaClient<$Result.GetResult<Prisma.$TermoReferenciaPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ExportacaoTR model
   */ 
  interface ExportacaoTRFieldRefs {
    readonly id: FieldRef<"ExportacaoTR", 'String'>
    readonly tr_id: FieldRef<"ExportacaoTR", 'String'>
    readonly tipo: FieldRef<"ExportacaoTR", 'String'>
    readonly url_arquivo: FieldRef<"ExportacaoTR", 'String'>
    readonly hash_sha256: FieldRef<"ExportacaoTR", 'String'>
    readonly gerado_em: FieldRef<"ExportacaoTR", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ExportacaoTR findUnique
   */
  export type ExportacaoTRFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExportacaoTR
     */
    select?: ExportacaoTRSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExportacaoTRInclude<ExtArgs> | null
    /**
     * Filter, which ExportacaoTR to fetch.
     */
    where: ExportacaoTRWhereUniqueInput
  }

  /**
   * ExportacaoTR findUniqueOrThrow
   */
  export type ExportacaoTRFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExportacaoTR
     */
    select?: ExportacaoTRSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExportacaoTRInclude<ExtArgs> | null
    /**
     * Filter, which ExportacaoTR to fetch.
     */
    where: ExportacaoTRWhereUniqueInput
  }

  /**
   * ExportacaoTR findFirst
   */
  export type ExportacaoTRFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExportacaoTR
     */
    select?: ExportacaoTRSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExportacaoTRInclude<ExtArgs> | null
    /**
     * Filter, which ExportacaoTR to fetch.
     */
    where?: ExportacaoTRWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExportacaoTRS to fetch.
     */
    orderBy?: ExportacaoTROrderByWithRelationInput | ExportacaoTROrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExportacaoTRS.
     */
    cursor?: ExportacaoTRWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExportacaoTRS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExportacaoTRS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExportacaoTRS.
     */
    distinct?: ExportacaoTRScalarFieldEnum | ExportacaoTRScalarFieldEnum[]
  }

  /**
   * ExportacaoTR findFirstOrThrow
   */
  export type ExportacaoTRFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExportacaoTR
     */
    select?: ExportacaoTRSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExportacaoTRInclude<ExtArgs> | null
    /**
     * Filter, which ExportacaoTR to fetch.
     */
    where?: ExportacaoTRWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExportacaoTRS to fetch.
     */
    orderBy?: ExportacaoTROrderByWithRelationInput | ExportacaoTROrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ExportacaoTRS.
     */
    cursor?: ExportacaoTRWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExportacaoTRS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExportacaoTRS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ExportacaoTRS.
     */
    distinct?: ExportacaoTRScalarFieldEnum | ExportacaoTRScalarFieldEnum[]
  }

  /**
   * ExportacaoTR findMany
   */
  export type ExportacaoTRFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExportacaoTR
     */
    select?: ExportacaoTRSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExportacaoTRInclude<ExtArgs> | null
    /**
     * Filter, which ExportacaoTRS to fetch.
     */
    where?: ExportacaoTRWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ExportacaoTRS to fetch.
     */
    orderBy?: ExportacaoTROrderByWithRelationInput | ExportacaoTROrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ExportacaoTRS.
     */
    cursor?: ExportacaoTRWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ExportacaoTRS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ExportacaoTRS.
     */
    skip?: number
    distinct?: ExportacaoTRScalarFieldEnum | ExportacaoTRScalarFieldEnum[]
  }

  /**
   * ExportacaoTR create
   */
  export type ExportacaoTRCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExportacaoTR
     */
    select?: ExportacaoTRSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExportacaoTRInclude<ExtArgs> | null
    /**
     * The data needed to create a ExportacaoTR.
     */
    data: XOR<ExportacaoTRCreateInput, ExportacaoTRUncheckedCreateInput>
  }

  /**
   * ExportacaoTR createMany
   */
  export type ExportacaoTRCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ExportacaoTRS.
     */
    data: ExportacaoTRCreateManyInput | ExportacaoTRCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ExportacaoTR createManyAndReturn
   */
  export type ExportacaoTRCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExportacaoTR
     */
    select?: ExportacaoTRSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ExportacaoTRS.
     */
    data: ExportacaoTRCreateManyInput | ExportacaoTRCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExportacaoTRIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ExportacaoTR update
   */
  export type ExportacaoTRUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExportacaoTR
     */
    select?: ExportacaoTRSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExportacaoTRInclude<ExtArgs> | null
    /**
     * The data needed to update a ExportacaoTR.
     */
    data: XOR<ExportacaoTRUpdateInput, ExportacaoTRUncheckedUpdateInput>
    /**
     * Choose, which ExportacaoTR to update.
     */
    where: ExportacaoTRWhereUniqueInput
  }

  /**
   * ExportacaoTR updateMany
   */
  export type ExportacaoTRUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ExportacaoTRS.
     */
    data: XOR<ExportacaoTRUpdateManyMutationInput, ExportacaoTRUncheckedUpdateManyInput>
    /**
     * Filter which ExportacaoTRS to update
     */
    where?: ExportacaoTRWhereInput
  }

  /**
   * ExportacaoTR upsert
   */
  export type ExportacaoTRUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExportacaoTR
     */
    select?: ExportacaoTRSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExportacaoTRInclude<ExtArgs> | null
    /**
     * The filter to search for the ExportacaoTR to update in case it exists.
     */
    where: ExportacaoTRWhereUniqueInput
    /**
     * In case the ExportacaoTR found by the `where` argument doesn't exist, create a new ExportacaoTR with this data.
     */
    create: XOR<ExportacaoTRCreateInput, ExportacaoTRUncheckedCreateInput>
    /**
     * In case the ExportacaoTR was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExportacaoTRUpdateInput, ExportacaoTRUncheckedUpdateInput>
  }

  /**
   * ExportacaoTR delete
   */
  export type ExportacaoTRDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExportacaoTR
     */
    select?: ExportacaoTRSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExportacaoTRInclude<ExtArgs> | null
    /**
     * Filter which ExportacaoTR to delete.
     */
    where: ExportacaoTRWhereUniqueInput
  }

  /**
   * ExportacaoTR deleteMany
   */
  export type ExportacaoTRDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ExportacaoTRS to delete
     */
    where?: ExportacaoTRWhereInput
  }

  /**
   * ExportacaoTR without action
   */
  export type ExportacaoTRDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ExportacaoTR
     */
    select?: ExportacaoTRSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExportacaoTRInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    nome: 'nome',
    password: 'password',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const TermoReferenciaScalarFieldEnum: {
    id: 'id',
    titulo: 'titulo',
    status: 'status',
    autorId: 'autorId',
    dadosColeta: 'dadosColeta',
    dadosPrecos: 'dadosPrecos',
    dadosJustificativa: 'dadosJustificativa',
    dadosFiscalizacao: 'dadosFiscalizacao',
    criado_em: 'criado_em',
    atualizado_em: 'atualizado_em'
  };

  export type TermoReferenciaScalarFieldEnum = (typeof TermoReferenciaScalarFieldEnum)[keyof typeof TermoReferenciaScalarFieldEnum]


  export const ExportacaoTRScalarFieldEnum: {
    id: 'id',
    tr_id: 'tr_id',
    tipo: 'tipo',
    url_arquivo: 'url_arquivo',
    hash_sha256: 'hash_sha256',
    gerado_em: 'gerado_em'
  };

  export type ExportacaoTRScalarFieldEnum = (typeof ExportacaoTRScalarFieldEnum)[keyof typeof ExportacaoTRScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    nome?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    documentos?: TermoReferenciaListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    nome?: SortOrderInput | SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    documentos?: TermoReferenciaOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    nome?: StringNullableFilter<"User"> | string | null
    password?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    documentos?: TermoReferenciaListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    nome?: SortOrderInput | SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    nome?: StringNullableWithAggregatesFilter<"User"> | string | null
    password?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type TermoReferenciaWhereInput = {
    AND?: TermoReferenciaWhereInput | TermoReferenciaWhereInput[]
    OR?: TermoReferenciaWhereInput[]
    NOT?: TermoReferenciaWhereInput | TermoReferenciaWhereInput[]
    id?: StringFilter<"TermoReferencia"> | string
    titulo?: StringFilter<"TermoReferencia"> | string
    status?: StringFilter<"TermoReferencia"> | string
    autorId?: StringFilter<"TermoReferencia"> | string
    dadosColeta?: JsonNullableFilter<"TermoReferencia">
    dadosPrecos?: JsonNullableFilter<"TermoReferencia">
    dadosJustificativa?: JsonNullableFilter<"TermoReferencia">
    dadosFiscalizacao?: JsonNullableFilter<"TermoReferencia">
    criado_em?: DateTimeFilter<"TermoReferencia"> | Date | string
    atualizado_em?: DateTimeFilter<"TermoReferencia"> | Date | string
    autor?: XOR<UserRelationFilter, UserWhereInput>
    exportacoes?: ExportacaoTRListRelationFilter
  }

  export type TermoReferenciaOrderByWithRelationInput = {
    id?: SortOrder
    titulo?: SortOrder
    status?: SortOrder
    autorId?: SortOrder
    dadosColeta?: SortOrderInput | SortOrder
    dadosPrecos?: SortOrderInput | SortOrder
    dadosJustificativa?: SortOrderInput | SortOrder
    dadosFiscalizacao?: SortOrderInput | SortOrder
    criado_em?: SortOrder
    atualizado_em?: SortOrder
    autor?: UserOrderByWithRelationInput
    exportacoes?: ExportacaoTROrderByRelationAggregateInput
  }

  export type TermoReferenciaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TermoReferenciaWhereInput | TermoReferenciaWhereInput[]
    OR?: TermoReferenciaWhereInput[]
    NOT?: TermoReferenciaWhereInput | TermoReferenciaWhereInput[]
    titulo?: StringFilter<"TermoReferencia"> | string
    status?: StringFilter<"TermoReferencia"> | string
    autorId?: StringFilter<"TermoReferencia"> | string
    dadosColeta?: JsonNullableFilter<"TermoReferencia">
    dadosPrecos?: JsonNullableFilter<"TermoReferencia">
    dadosJustificativa?: JsonNullableFilter<"TermoReferencia">
    dadosFiscalizacao?: JsonNullableFilter<"TermoReferencia">
    criado_em?: DateTimeFilter<"TermoReferencia"> | Date | string
    atualizado_em?: DateTimeFilter<"TermoReferencia"> | Date | string
    autor?: XOR<UserRelationFilter, UserWhereInput>
    exportacoes?: ExportacaoTRListRelationFilter
  }, "id">

  export type TermoReferenciaOrderByWithAggregationInput = {
    id?: SortOrder
    titulo?: SortOrder
    status?: SortOrder
    autorId?: SortOrder
    dadosColeta?: SortOrderInput | SortOrder
    dadosPrecos?: SortOrderInput | SortOrder
    dadosJustificativa?: SortOrderInput | SortOrder
    dadosFiscalizacao?: SortOrderInput | SortOrder
    criado_em?: SortOrder
    atualizado_em?: SortOrder
    _count?: TermoReferenciaCountOrderByAggregateInput
    _max?: TermoReferenciaMaxOrderByAggregateInput
    _min?: TermoReferenciaMinOrderByAggregateInput
  }

  export type TermoReferenciaScalarWhereWithAggregatesInput = {
    AND?: TermoReferenciaScalarWhereWithAggregatesInput | TermoReferenciaScalarWhereWithAggregatesInput[]
    OR?: TermoReferenciaScalarWhereWithAggregatesInput[]
    NOT?: TermoReferenciaScalarWhereWithAggregatesInput | TermoReferenciaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TermoReferencia"> | string
    titulo?: StringWithAggregatesFilter<"TermoReferencia"> | string
    status?: StringWithAggregatesFilter<"TermoReferencia"> | string
    autorId?: StringWithAggregatesFilter<"TermoReferencia"> | string
    dadosColeta?: JsonNullableWithAggregatesFilter<"TermoReferencia">
    dadosPrecos?: JsonNullableWithAggregatesFilter<"TermoReferencia">
    dadosJustificativa?: JsonNullableWithAggregatesFilter<"TermoReferencia">
    dadosFiscalizacao?: JsonNullableWithAggregatesFilter<"TermoReferencia">
    criado_em?: DateTimeWithAggregatesFilter<"TermoReferencia"> | Date | string
    atualizado_em?: DateTimeWithAggregatesFilter<"TermoReferencia"> | Date | string
  }

  export type ExportacaoTRWhereInput = {
    AND?: ExportacaoTRWhereInput | ExportacaoTRWhereInput[]
    OR?: ExportacaoTRWhereInput[]
    NOT?: ExportacaoTRWhereInput | ExportacaoTRWhereInput[]
    id?: StringFilter<"ExportacaoTR"> | string
    tr_id?: StringFilter<"ExportacaoTR"> | string
    tipo?: StringFilter<"ExportacaoTR"> | string
    url_arquivo?: StringFilter<"ExportacaoTR"> | string
    hash_sha256?: StringFilter<"ExportacaoTR"> | string
    gerado_em?: DateTimeFilter<"ExportacaoTR"> | Date | string
    tr?: XOR<TermoReferenciaRelationFilter, TermoReferenciaWhereInput>
  }

  export type ExportacaoTROrderByWithRelationInput = {
    id?: SortOrder
    tr_id?: SortOrder
    tipo?: SortOrder
    url_arquivo?: SortOrder
    hash_sha256?: SortOrder
    gerado_em?: SortOrder
    tr?: TermoReferenciaOrderByWithRelationInput
  }

  export type ExportacaoTRWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ExportacaoTRWhereInput | ExportacaoTRWhereInput[]
    OR?: ExportacaoTRWhereInput[]
    NOT?: ExportacaoTRWhereInput | ExportacaoTRWhereInput[]
    tr_id?: StringFilter<"ExportacaoTR"> | string
    tipo?: StringFilter<"ExportacaoTR"> | string
    url_arquivo?: StringFilter<"ExportacaoTR"> | string
    hash_sha256?: StringFilter<"ExportacaoTR"> | string
    gerado_em?: DateTimeFilter<"ExportacaoTR"> | Date | string
    tr?: XOR<TermoReferenciaRelationFilter, TermoReferenciaWhereInput>
  }, "id">

  export type ExportacaoTROrderByWithAggregationInput = {
    id?: SortOrder
    tr_id?: SortOrder
    tipo?: SortOrder
    url_arquivo?: SortOrder
    hash_sha256?: SortOrder
    gerado_em?: SortOrder
    _count?: ExportacaoTRCountOrderByAggregateInput
    _max?: ExportacaoTRMaxOrderByAggregateInput
    _min?: ExportacaoTRMinOrderByAggregateInput
  }

  export type ExportacaoTRScalarWhereWithAggregatesInput = {
    AND?: ExportacaoTRScalarWhereWithAggregatesInput | ExportacaoTRScalarWhereWithAggregatesInput[]
    OR?: ExportacaoTRScalarWhereWithAggregatesInput[]
    NOT?: ExportacaoTRScalarWhereWithAggregatesInput | ExportacaoTRScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ExportacaoTR"> | string
    tr_id?: StringWithAggregatesFilter<"ExportacaoTR"> | string
    tipo?: StringWithAggregatesFilter<"ExportacaoTR"> | string
    url_arquivo?: StringWithAggregatesFilter<"ExportacaoTR"> | string
    hash_sha256?: StringWithAggregatesFilter<"ExportacaoTR"> | string
    gerado_em?: DateTimeWithAggregatesFilter<"ExportacaoTR"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    nome?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    documentos?: TermoReferenciaCreateNestedManyWithoutAutorInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    nome?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    documentos?: TermoReferenciaUncheckedCreateNestedManyWithoutAutorInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentos?: TermoReferenciaUpdateManyWithoutAutorNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    documentos?: TermoReferenciaUncheckedUpdateManyWithoutAutorNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    nome?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TermoReferenciaCreateInput = {
    id?: string
    titulo: string
    status?: string
    dadosColeta?: NullableJsonNullValueInput | InputJsonValue
    dadosPrecos?: NullableJsonNullValueInput | InputJsonValue
    dadosJustificativa?: NullableJsonNullValueInput | InputJsonValue
    dadosFiscalizacao?: NullableJsonNullValueInput | InputJsonValue
    criado_em?: Date | string
    atualizado_em?: Date | string
    autor: UserCreateNestedOneWithoutDocumentosInput
    exportacoes?: ExportacaoTRCreateNestedManyWithoutTrInput
  }

  export type TermoReferenciaUncheckedCreateInput = {
    id?: string
    titulo: string
    status?: string
    autorId: string
    dadosColeta?: NullableJsonNullValueInput | InputJsonValue
    dadosPrecos?: NullableJsonNullValueInput | InputJsonValue
    dadosJustificativa?: NullableJsonNullValueInput | InputJsonValue
    dadosFiscalizacao?: NullableJsonNullValueInput | InputJsonValue
    criado_em?: Date | string
    atualizado_em?: Date | string
    exportacoes?: ExportacaoTRUncheckedCreateNestedManyWithoutTrInput
  }

  export type TermoReferenciaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dadosColeta?: NullableJsonNullValueInput | InputJsonValue
    dadosPrecos?: NullableJsonNullValueInput | InputJsonValue
    dadosJustificativa?: NullableJsonNullValueInput | InputJsonValue
    dadosFiscalizacao?: NullableJsonNullValueInput | InputJsonValue
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    autor?: UserUpdateOneRequiredWithoutDocumentosNestedInput
    exportacoes?: ExportacaoTRUpdateManyWithoutTrNestedInput
  }

  export type TermoReferenciaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    autorId?: StringFieldUpdateOperationsInput | string
    dadosColeta?: NullableJsonNullValueInput | InputJsonValue
    dadosPrecos?: NullableJsonNullValueInput | InputJsonValue
    dadosJustificativa?: NullableJsonNullValueInput | InputJsonValue
    dadosFiscalizacao?: NullableJsonNullValueInput | InputJsonValue
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    exportacoes?: ExportacaoTRUncheckedUpdateManyWithoutTrNestedInput
  }

  export type TermoReferenciaCreateManyInput = {
    id?: string
    titulo: string
    status?: string
    autorId: string
    dadosColeta?: NullableJsonNullValueInput | InputJsonValue
    dadosPrecos?: NullableJsonNullValueInput | InputJsonValue
    dadosJustificativa?: NullableJsonNullValueInput | InputJsonValue
    dadosFiscalizacao?: NullableJsonNullValueInput | InputJsonValue
    criado_em?: Date | string
    atualizado_em?: Date | string
  }

  export type TermoReferenciaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dadosColeta?: NullableJsonNullValueInput | InputJsonValue
    dadosPrecos?: NullableJsonNullValueInput | InputJsonValue
    dadosJustificativa?: NullableJsonNullValueInput | InputJsonValue
    dadosFiscalizacao?: NullableJsonNullValueInput | InputJsonValue
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TermoReferenciaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    autorId?: StringFieldUpdateOperationsInput | string
    dadosColeta?: NullableJsonNullValueInput | InputJsonValue
    dadosPrecos?: NullableJsonNullValueInput | InputJsonValue
    dadosJustificativa?: NullableJsonNullValueInput | InputJsonValue
    dadosFiscalizacao?: NullableJsonNullValueInput | InputJsonValue
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExportacaoTRCreateInput = {
    id?: string
    tipo: string
    url_arquivo: string
    hash_sha256: string
    gerado_em?: Date | string
    tr: TermoReferenciaCreateNestedOneWithoutExportacoesInput
  }

  export type ExportacaoTRUncheckedCreateInput = {
    id?: string
    tr_id: string
    tipo: string
    url_arquivo: string
    hash_sha256: string
    gerado_em?: Date | string
  }

  export type ExportacaoTRUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    url_arquivo?: StringFieldUpdateOperationsInput | string
    hash_sha256?: StringFieldUpdateOperationsInput | string
    gerado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    tr?: TermoReferenciaUpdateOneRequiredWithoutExportacoesNestedInput
  }

  export type ExportacaoTRUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    tr_id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    url_arquivo?: StringFieldUpdateOperationsInput | string
    hash_sha256?: StringFieldUpdateOperationsInput | string
    gerado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExportacaoTRCreateManyInput = {
    id?: string
    tr_id: string
    tipo: string
    url_arquivo: string
    hash_sha256: string
    gerado_em?: Date | string
  }

  export type ExportacaoTRUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    url_arquivo?: StringFieldUpdateOperationsInput | string
    hash_sha256?: StringFieldUpdateOperationsInput | string
    gerado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExportacaoTRUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    tr_id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    url_arquivo?: StringFieldUpdateOperationsInput | string
    hash_sha256?: StringFieldUpdateOperationsInput | string
    gerado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type TermoReferenciaListRelationFilter = {
    every?: TermoReferenciaWhereInput
    some?: TermoReferenciaWhereInput
    none?: TermoReferenciaWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type TermoReferenciaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    nome?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    nome?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    nome?: SortOrder
    password?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type JsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ExportacaoTRListRelationFilter = {
    every?: ExportacaoTRWhereInput
    some?: ExportacaoTRWhereInput
    none?: ExportacaoTRWhereInput
  }

  export type ExportacaoTROrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TermoReferenciaCountOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    status?: SortOrder
    autorId?: SortOrder
    dadosColeta?: SortOrder
    dadosPrecos?: SortOrder
    dadosJustificativa?: SortOrder
    dadosFiscalizacao?: SortOrder
    criado_em?: SortOrder
    atualizado_em?: SortOrder
  }

  export type TermoReferenciaMaxOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    status?: SortOrder
    autorId?: SortOrder
    criado_em?: SortOrder
    atualizado_em?: SortOrder
  }

  export type TermoReferenciaMinOrderByAggregateInput = {
    id?: SortOrder
    titulo?: SortOrder
    status?: SortOrder
    autorId?: SortOrder
    criado_em?: SortOrder
    atualizado_em?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type TermoReferenciaRelationFilter = {
    is?: TermoReferenciaWhereInput
    isNot?: TermoReferenciaWhereInput
  }

  export type ExportacaoTRCountOrderByAggregateInput = {
    id?: SortOrder
    tr_id?: SortOrder
    tipo?: SortOrder
    url_arquivo?: SortOrder
    hash_sha256?: SortOrder
    gerado_em?: SortOrder
  }

  export type ExportacaoTRMaxOrderByAggregateInput = {
    id?: SortOrder
    tr_id?: SortOrder
    tipo?: SortOrder
    url_arquivo?: SortOrder
    hash_sha256?: SortOrder
    gerado_em?: SortOrder
  }

  export type ExportacaoTRMinOrderByAggregateInput = {
    id?: SortOrder
    tr_id?: SortOrder
    tipo?: SortOrder
    url_arquivo?: SortOrder
    hash_sha256?: SortOrder
    gerado_em?: SortOrder
  }

  export type TermoReferenciaCreateNestedManyWithoutAutorInput = {
    create?: XOR<TermoReferenciaCreateWithoutAutorInput, TermoReferenciaUncheckedCreateWithoutAutorInput> | TermoReferenciaCreateWithoutAutorInput[] | TermoReferenciaUncheckedCreateWithoutAutorInput[]
    connectOrCreate?: TermoReferenciaCreateOrConnectWithoutAutorInput | TermoReferenciaCreateOrConnectWithoutAutorInput[]
    createMany?: TermoReferenciaCreateManyAutorInputEnvelope
    connect?: TermoReferenciaWhereUniqueInput | TermoReferenciaWhereUniqueInput[]
  }

  export type TermoReferenciaUncheckedCreateNestedManyWithoutAutorInput = {
    create?: XOR<TermoReferenciaCreateWithoutAutorInput, TermoReferenciaUncheckedCreateWithoutAutorInput> | TermoReferenciaCreateWithoutAutorInput[] | TermoReferenciaUncheckedCreateWithoutAutorInput[]
    connectOrCreate?: TermoReferenciaCreateOrConnectWithoutAutorInput | TermoReferenciaCreateOrConnectWithoutAutorInput[]
    createMany?: TermoReferenciaCreateManyAutorInputEnvelope
    connect?: TermoReferenciaWhereUniqueInput | TermoReferenciaWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type TermoReferenciaUpdateManyWithoutAutorNestedInput = {
    create?: XOR<TermoReferenciaCreateWithoutAutorInput, TermoReferenciaUncheckedCreateWithoutAutorInput> | TermoReferenciaCreateWithoutAutorInput[] | TermoReferenciaUncheckedCreateWithoutAutorInput[]
    connectOrCreate?: TermoReferenciaCreateOrConnectWithoutAutorInput | TermoReferenciaCreateOrConnectWithoutAutorInput[]
    upsert?: TermoReferenciaUpsertWithWhereUniqueWithoutAutorInput | TermoReferenciaUpsertWithWhereUniqueWithoutAutorInput[]
    createMany?: TermoReferenciaCreateManyAutorInputEnvelope
    set?: TermoReferenciaWhereUniqueInput | TermoReferenciaWhereUniqueInput[]
    disconnect?: TermoReferenciaWhereUniqueInput | TermoReferenciaWhereUniqueInput[]
    delete?: TermoReferenciaWhereUniqueInput | TermoReferenciaWhereUniqueInput[]
    connect?: TermoReferenciaWhereUniqueInput | TermoReferenciaWhereUniqueInput[]
    update?: TermoReferenciaUpdateWithWhereUniqueWithoutAutorInput | TermoReferenciaUpdateWithWhereUniqueWithoutAutorInput[]
    updateMany?: TermoReferenciaUpdateManyWithWhereWithoutAutorInput | TermoReferenciaUpdateManyWithWhereWithoutAutorInput[]
    deleteMany?: TermoReferenciaScalarWhereInput | TermoReferenciaScalarWhereInput[]
  }

  export type TermoReferenciaUncheckedUpdateManyWithoutAutorNestedInput = {
    create?: XOR<TermoReferenciaCreateWithoutAutorInput, TermoReferenciaUncheckedCreateWithoutAutorInput> | TermoReferenciaCreateWithoutAutorInput[] | TermoReferenciaUncheckedCreateWithoutAutorInput[]
    connectOrCreate?: TermoReferenciaCreateOrConnectWithoutAutorInput | TermoReferenciaCreateOrConnectWithoutAutorInput[]
    upsert?: TermoReferenciaUpsertWithWhereUniqueWithoutAutorInput | TermoReferenciaUpsertWithWhereUniqueWithoutAutorInput[]
    createMany?: TermoReferenciaCreateManyAutorInputEnvelope
    set?: TermoReferenciaWhereUniqueInput | TermoReferenciaWhereUniqueInput[]
    disconnect?: TermoReferenciaWhereUniqueInput | TermoReferenciaWhereUniqueInput[]
    delete?: TermoReferenciaWhereUniqueInput | TermoReferenciaWhereUniqueInput[]
    connect?: TermoReferenciaWhereUniqueInput | TermoReferenciaWhereUniqueInput[]
    update?: TermoReferenciaUpdateWithWhereUniqueWithoutAutorInput | TermoReferenciaUpdateWithWhereUniqueWithoutAutorInput[]
    updateMany?: TermoReferenciaUpdateManyWithWhereWithoutAutorInput | TermoReferenciaUpdateManyWithWhereWithoutAutorInput[]
    deleteMany?: TermoReferenciaScalarWhereInput | TermoReferenciaScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutDocumentosInput = {
    create?: XOR<UserCreateWithoutDocumentosInput, UserUncheckedCreateWithoutDocumentosInput>
    connectOrCreate?: UserCreateOrConnectWithoutDocumentosInput
    connect?: UserWhereUniqueInput
  }

  export type ExportacaoTRCreateNestedManyWithoutTrInput = {
    create?: XOR<ExportacaoTRCreateWithoutTrInput, ExportacaoTRUncheckedCreateWithoutTrInput> | ExportacaoTRCreateWithoutTrInput[] | ExportacaoTRUncheckedCreateWithoutTrInput[]
    connectOrCreate?: ExportacaoTRCreateOrConnectWithoutTrInput | ExportacaoTRCreateOrConnectWithoutTrInput[]
    createMany?: ExportacaoTRCreateManyTrInputEnvelope
    connect?: ExportacaoTRWhereUniqueInput | ExportacaoTRWhereUniqueInput[]
  }

  export type ExportacaoTRUncheckedCreateNestedManyWithoutTrInput = {
    create?: XOR<ExportacaoTRCreateWithoutTrInput, ExportacaoTRUncheckedCreateWithoutTrInput> | ExportacaoTRCreateWithoutTrInput[] | ExportacaoTRUncheckedCreateWithoutTrInput[]
    connectOrCreate?: ExportacaoTRCreateOrConnectWithoutTrInput | ExportacaoTRCreateOrConnectWithoutTrInput[]
    createMany?: ExportacaoTRCreateManyTrInputEnvelope
    connect?: ExportacaoTRWhereUniqueInput | ExportacaoTRWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutDocumentosNestedInput = {
    create?: XOR<UserCreateWithoutDocumentosInput, UserUncheckedCreateWithoutDocumentosInput>
    connectOrCreate?: UserCreateOrConnectWithoutDocumentosInput
    upsert?: UserUpsertWithoutDocumentosInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutDocumentosInput, UserUpdateWithoutDocumentosInput>, UserUncheckedUpdateWithoutDocumentosInput>
  }

  export type ExportacaoTRUpdateManyWithoutTrNestedInput = {
    create?: XOR<ExportacaoTRCreateWithoutTrInput, ExportacaoTRUncheckedCreateWithoutTrInput> | ExportacaoTRCreateWithoutTrInput[] | ExportacaoTRUncheckedCreateWithoutTrInput[]
    connectOrCreate?: ExportacaoTRCreateOrConnectWithoutTrInput | ExportacaoTRCreateOrConnectWithoutTrInput[]
    upsert?: ExportacaoTRUpsertWithWhereUniqueWithoutTrInput | ExportacaoTRUpsertWithWhereUniqueWithoutTrInput[]
    createMany?: ExportacaoTRCreateManyTrInputEnvelope
    set?: ExportacaoTRWhereUniqueInput | ExportacaoTRWhereUniqueInput[]
    disconnect?: ExportacaoTRWhereUniqueInput | ExportacaoTRWhereUniqueInput[]
    delete?: ExportacaoTRWhereUniqueInput | ExportacaoTRWhereUniqueInput[]
    connect?: ExportacaoTRWhereUniqueInput | ExportacaoTRWhereUniqueInput[]
    update?: ExportacaoTRUpdateWithWhereUniqueWithoutTrInput | ExportacaoTRUpdateWithWhereUniqueWithoutTrInput[]
    updateMany?: ExportacaoTRUpdateManyWithWhereWithoutTrInput | ExportacaoTRUpdateManyWithWhereWithoutTrInput[]
    deleteMany?: ExportacaoTRScalarWhereInput | ExportacaoTRScalarWhereInput[]
  }

  export type ExportacaoTRUncheckedUpdateManyWithoutTrNestedInput = {
    create?: XOR<ExportacaoTRCreateWithoutTrInput, ExportacaoTRUncheckedCreateWithoutTrInput> | ExportacaoTRCreateWithoutTrInput[] | ExportacaoTRUncheckedCreateWithoutTrInput[]
    connectOrCreate?: ExportacaoTRCreateOrConnectWithoutTrInput | ExportacaoTRCreateOrConnectWithoutTrInput[]
    upsert?: ExportacaoTRUpsertWithWhereUniqueWithoutTrInput | ExportacaoTRUpsertWithWhereUniqueWithoutTrInput[]
    createMany?: ExportacaoTRCreateManyTrInputEnvelope
    set?: ExportacaoTRWhereUniqueInput | ExportacaoTRWhereUniqueInput[]
    disconnect?: ExportacaoTRWhereUniqueInput | ExportacaoTRWhereUniqueInput[]
    delete?: ExportacaoTRWhereUniqueInput | ExportacaoTRWhereUniqueInput[]
    connect?: ExportacaoTRWhereUniqueInput | ExportacaoTRWhereUniqueInput[]
    update?: ExportacaoTRUpdateWithWhereUniqueWithoutTrInput | ExportacaoTRUpdateWithWhereUniqueWithoutTrInput[]
    updateMany?: ExportacaoTRUpdateManyWithWhereWithoutTrInput | ExportacaoTRUpdateManyWithWhereWithoutTrInput[]
    deleteMany?: ExportacaoTRScalarWhereInput | ExportacaoTRScalarWhereInput[]
  }

  export type TermoReferenciaCreateNestedOneWithoutExportacoesInput = {
    create?: XOR<TermoReferenciaCreateWithoutExportacoesInput, TermoReferenciaUncheckedCreateWithoutExportacoesInput>
    connectOrCreate?: TermoReferenciaCreateOrConnectWithoutExportacoesInput
    connect?: TermoReferenciaWhereUniqueInput
  }

  export type TermoReferenciaUpdateOneRequiredWithoutExportacoesNestedInput = {
    create?: XOR<TermoReferenciaCreateWithoutExportacoesInput, TermoReferenciaUncheckedCreateWithoutExportacoesInput>
    connectOrCreate?: TermoReferenciaCreateOrConnectWithoutExportacoesInput
    upsert?: TermoReferenciaUpsertWithoutExportacoesInput
    connect?: TermoReferenciaWhereUniqueInput
    update?: XOR<XOR<TermoReferenciaUpdateToOneWithWhereWithoutExportacoesInput, TermoReferenciaUpdateWithoutExportacoesInput>, TermoReferenciaUncheckedUpdateWithoutExportacoesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type TermoReferenciaCreateWithoutAutorInput = {
    id?: string
    titulo: string
    status?: string
    dadosColeta?: NullableJsonNullValueInput | InputJsonValue
    dadosPrecos?: NullableJsonNullValueInput | InputJsonValue
    dadosJustificativa?: NullableJsonNullValueInput | InputJsonValue
    dadosFiscalizacao?: NullableJsonNullValueInput | InputJsonValue
    criado_em?: Date | string
    atualizado_em?: Date | string
    exportacoes?: ExportacaoTRCreateNestedManyWithoutTrInput
  }

  export type TermoReferenciaUncheckedCreateWithoutAutorInput = {
    id?: string
    titulo: string
    status?: string
    dadosColeta?: NullableJsonNullValueInput | InputJsonValue
    dadosPrecos?: NullableJsonNullValueInput | InputJsonValue
    dadosJustificativa?: NullableJsonNullValueInput | InputJsonValue
    dadosFiscalizacao?: NullableJsonNullValueInput | InputJsonValue
    criado_em?: Date | string
    atualizado_em?: Date | string
    exportacoes?: ExportacaoTRUncheckedCreateNestedManyWithoutTrInput
  }

  export type TermoReferenciaCreateOrConnectWithoutAutorInput = {
    where: TermoReferenciaWhereUniqueInput
    create: XOR<TermoReferenciaCreateWithoutAutorInput, TermoReferenciaUncheckedCreateWithoutAutorInput>
  }

  export type TermoReferenciaCreateManyAutorInputEnvelope = {
    data: TermoReferenciaCreateManyAutorInput | TermoReferenciaCreateManyAutorInput[]
    skipDuplicates?: boolean
  }

  export type TermoReferenciaUpsertWithWhereUniqueWithoutAutorInput = {
    where: TermoReferenciaWhereUniqueInput
    update: XOR<TermoReferenciaUpdateWithoutAutorInput, TermoReferenciaUncheckedUpdateWithoutAutorInput>
    create: XOR<TermoReferenciaCreateWithoutAutorInput, TermoReferenciaUncheckedCreateWithoutAutorInput>
  }

  export type TermoReferenciaUpdateWithWhereUniqueWithoutAutorInput = {
    where: TermoReferenciaWhereUniqueInput
    data: XOR<TermoReferenciaUpdateWithoutAutorInput, TermoReferenciaUncheckedUpdateWithoutAutorInput>
  }

  export type TermoReferenciaUpdateManyWithWhereWithoutAutorInput = {
    where: TermoReferenciaScalarWhereInput
    data: XOR<TermoReferenciaUpdateManyMutationInput, TermoReferenciaUncheckedUpdateManyWithoutAutorInput>
  }

  export type TermoReferenciaScalarWhereInput = {
    AND?: TermoReferenciaScalarWhereInput | TermoReferenciaScalarWhereInput[]
    OR?: TermoReferenciaScalarWhereInput[]
    NOT?: TermoReferenciaScalarWhereInput | TermoReferenciaScalarWhereInput[]
    id?: StringFilter<"TermoReferencia"> | string
    titulo?: StringFilter<"TermoReferencia"> | string
    status?: StringFilter<"TermoReferencia"> | string
    autorId?: StringFilter<"TermoReferencia"> | string
    dadosColeta?: JsonNullableFilter<"TermoReferencia">
    dadosPrecos?: JsonNullableFilter<"TermoReferencia">
    dadosJustificativa?: JsonNullableFilter<"TermoReferencia">
    dadosFiscalizacao?: JsonNullableFilter<"TermoReferencia">
    criado_em?: DateTimeFilter<"TermoReferencia"> | Date | string
    atualizado_em?: DateTimeFilter<"TermoReferencia"> | Date | string
  }

  export type UserCreateWithoutDocumentosInput = {
    id?: string
    email: string
    nome?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUncheckedCreateWithoutDocumentosInput = {
    id?: string
    email: string
    nome?: string | null
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserCreateOrConnectWithoutDocumentosInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDocumentosInput, UserUncheckedCreateWithoutDocumentosInput>
  }

  export type ExportacaoTRCreateWithoutTrInput = {
    id?: string
    tipo: string
    url_arquivo: string
    hash_sha256: string
    gerado_em?: Date | string
  }

  export type ExportacaoTRUncheckedCreateWithoutTrInput = {
    id?: string
    tipo: string
    url_arquivo: string
    hash_sha256: string
    gerado_em?: Date | string
  }

  export type ExportacaoTRCreateOrConnectWithoutTrInput = {
    where: ExportacaoTRWhereUniqueInput
    create: XOR<ExportacaoTRCreateWithoutTrInput, ExportacaoTRUncheckedCreateWithoutTrInput>
  }

  export type ExportacaoTRCreateManyTrInputEnvelope = {
    data: ExportacaoTRCreateManyTrInput | ExportacaoTRCreateManyTrInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutDocumentosInput = {
    update: XOR<UserUpdateWithoutDocumentosInput, UserUncheckedUpdateWithoutDocumentosInput>
    create: XOR<UserCreateWithoutDocumentosInput, UserUncheckedCreateWithoutDocumentosInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutDocumentosInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutDocumentosInput, UserUncheckedUpdateWithoutDocumentosInput>
  }

  export type UserUpdateWithoutDocumentosInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateWithoutDocumentosInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    nome?: NullableStringFieldUpdateOperationsInput | string | null
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExportacaoTRUpsertWithWhereUniqueWithoutTrInput = {
    where: ExportacaoTRWhereUniqueInput
    update: XOR<ExportacaoTRUpdateWithoutTrInput, ExportacaoTRUncheckedUpdateWithoutTrInput>
    create: XOR<ExportacaoTRCreateWithoutTrInput, ExportacaoTRUncheckedCreateWithoutTrInput>
  }

  export type ExportacaoTRUpdateWithWhereUniqueWithoutTrInput = {
    where: ExportacaoTRWhereUniqueInput
    data: XOR<ExportacaoTRUpdateWithoutTrInput, ExportacaoTRUncheckedUpdateWithoutTrInput>
  }

  export type ExportacaoTRUpdateManyWithWhereWithoutTrInput = {
    where: ExportacaoTRScalarWhereInput
    data: XOR<ExportacaoTRUpdateManyMutationInput, ExportacaoTRUncheckedUpdateManyWithoutTrInput>
  }

  export type ExportacaoTRScalarWhereInput = {
    AND?: ExportacaoTRScalarWhereInput | ExportacaoTRScalarWhereInput[]
    OR?: ExportacaoTRScalarWhereInput[]
    NOT?: ExportacaoTRScalarWhereInput | ExportacaoTRScalarWhereInput[]
    id?: StringFilter<"ExportacaoTR"> | string
    tr_id?: StringFilter<"ExportacaoTR"> | string
    tipo?: StringFilter<"ExportacaoTR"> | string
    url_arquivo?: StringFilter<"ExportacaoTR"> | string
    hash_sha256?: StringFilter<"ExportacaoTR"> | string
    gerado_em?: DateTimeFilter<"ExportacaoTR"> | Date | string
  }

  export type TermoReferenciaCreateWithoutExportacoesInput = {
    id?: string
    titulo: string
    status?: string
    dadosColeta?: NullableJsonNullValueInput | InputJsonValue
    dadosPrecos?: NullableJsonNullValueInput | InputJsonValue
    dadosJustificativa?: NullableJsonNullValueInput | InputJsonValue
    dadosFiscalizacao?: NullableJsonNullValueInput | InputJsonValue
    criado_em?: Date | string
    atualizado_em?: Date | string
    autor: UserCreateNestedOneWithoutDocumentosInput
  }

  export type TermoReferenciaUncheckedCreateWithoutExportacoesInput = {
    id?: string
    titulo: string
    status?: string
    autorId: string
    dadosColeta?: NullableJsonNullValueInput | InputJsonValue
    dadosPrecos?: NullableJsonNullValueInput | InputJsonValue
    dadosJustificativa?: NullableJsonNullValueInput | InputJsonValue
    dadosFiscalizacao?: NullableJsonNullValueInput | InputJsonValue
    criado_em?: Date | string
    atualizado_em?: Date | string
  }

  export type TermoReferenciaCreateOrConnectWithoutExportacoesInput = {
    where: TermoReferenciaWhereUniqueInput
    create: XOR<TermoReferenciaCreateWithoutExportacoesInput, TermoReferenciaUncheckedCreateWithoutExportacoesInput>
  }

  export type TermoReferenciaUpsertWithoutExportacoesInput = {
    update: XOR<TermoReferenciaUpdateWithoutExportacoesInput, TermoReferenciaUncheckedUpdateWithoutExportacoesInput>
    create: XOR<TermoReferenciaCreateWithoutExportacoesInput, TermoReferenciaUncheckedCreateWithoutExportacoesInput>
    where?: TermoReferenciaWhereInput
  }

  export type TermoReferenciaUpdateToOneWithWhereWithoutExportacoesInput = {
    where?: TermoReferenciaWhereInput
    data: XOR<TermoReferenciaUpdateWithoutExportacoesInput, TermoReferenciaUncheckedUpdateWithoutExportacoesInput>
  }

  export type TermoReferenciaUpdateWithoutExportacoesInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dadosColeta?: NullableJsonNullValueInput | InputJsonValue
    dadosPrecos?: NullableJsonNullValueInput | InputJsonValue
    dadosJustificativa?: NullableJsonNullValueInput | InputJsonValue
    dadosFiscalizacao?: NullableJsonNullValueInput | InputJsonValue
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    autor?: UserUpdateOneRequiredWithoutDocumentosNestedInput
  }

  export type TermoReferenciaUncheckedUpdateWithoutExportacoesInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    autorId?: StringFieldUpdateOperationsInput | string
    dadosColeta?: NullableJsonNullValueInput | InputJsonValue
    dadosPrecos?: NullableJsonNullValueInput | InputJsonValue
    dadosJustificativa?: NullableJsonNullValueInput | InputJsonValue
    dadosFiscalizacao?: NullableJsonNullValueInput | InputJsonValue
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TermoReferenciaCreateManyAutorInput = {
    id?: string
    titulo: string
    status?: string
    dadosColeta?: NullableJsonNullValueInput | InputJsonValue
    dadosPrecos?: NullableJsonNullValueInput | InputJsonValue
    dadosJustificativa?: NullableJsonNullValueInput | InputJsonValue
    dadosFiscalizacao?: NullableJsonNullValueInput | InputJsonValue
    criado_em?: Date | string
    atualizado_em?: Date | string
  }

  export type TermoReferenciaUpdateWithoutAutorInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dadosColeta?: NullableJsonNullValueInput | InputJsonValue
    dadosPrecos?: NullableJsonNullValueInput | InputJsonValue
    dadosJustificativa?: NullableJsonNullValueInput | InputJsonValue
    dadosFiscalizacao?: NullableJsonNullValueInput | InputJsonValue
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    exportacoes?: ExportacaoTRUpdateManyWithoutTrNestedInput
  }

  export type TermoReferenciaUncheckedUpdateWithoutAutorInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dadosColeta?: NullableJsonNullValueInput | InputJsonValue
    dadosPrecos?: NullableJsonNullValueInput | InputJsonValue
    dadosJustificativa?: NullableJsonNullValueInput | InputJsonValue
    dadosFiscalizacao?: NullableJsonNullValueInput | InputJsonValue
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    exportacoes?: ExportacaoTRUncheckedUpdateManyWithoutTrNestedInput
  }

  export type TermoReferenciaUncheckedUpdateManyWithoutAutorInput = {
    id?: StringFieldUpdateOperationsInput | string
    titulo?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    dadosColeta?: NullableJsonNullValueInput | InputJsonValue
    dadosPrecos?: NullableJsonNullValueInput | InputJsonValue
    dadosJustificativa?: NullableJsonNullValueInput | InputJsonValue
    dadosFiscalizacao?: NullableJsonNullValueInput | InputJsonValue
    criado_em?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExportacaoTRCreateManyTrInput = {
    id?: string
    tipo: string
    url_arquivo: string
    hash_sha256: string
    gerado_em?: Date | string
  }

  export type ExportacaoTRUpdateWithoutTrInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    url_arquivo?: StringFieldUpdateOperationsInput | string
    hash_sha256?: StringFieldUpdateOperationsInput | string
    gerado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExportacaoTRUncheckedUpdateWithoutTrInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    url_arquivo?: StringFieldUpdateOperationsInput | string
    hash_sha256?: StringFieldUpdateOperationsInput | string
    gerado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ExportacaoTRUncheckedUpdateManyWithoutTrInput = {
    id?: StringFieldUpdateOperationsInput | string
    tipo?: StringFieldUpdateOperationsInput | string
    url_arquivo?: StringFieldUpdateOperationsInput | string
    hash_sha256?: StringFieldUpdateOperationsInput | string
    gerado_em?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TermoReferenciaCountOutputTypeDefaultArgs instead
     */
    export type TermoReferenciaCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TermoReferenciaCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TermoReferenciaDefaultArgs instead
     */
    export type TermoReferenciaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TermoReferenciaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExportacaoTRDefaultArgs instead
     */
    export type ExportacaoTRArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExportacaoTRDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}